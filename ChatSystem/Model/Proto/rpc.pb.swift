// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rpc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RpcMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 = 0

  var result: RpcMessage.Result = .default

  var version: String = String()

  var service: String = String()

  var sourceID: Int64 = 0

  var contextID: Int64 = 0

  var payloadData: Data = SwiftProtobuf.Internal.emptyData

  var payloadClass: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case `default` // = 0
    case success // = 1
    case invalidVersion // = 2
    case invalidService // = 3
    case invalidPayload // = 4
    case notAuthenticated // = 5
    case serviceRejected // = 6
    case serviceUnavailable // = 7
    case internalError // = 99
    case UNRECOGNIZED(Int)

    init() {
      self = .default
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .default
      case 1: self = .success
      case 2: self = .invalidVersion
      case 3: self = .invalidService
      case 4: self = .invalidPayload
      case 5: self = .notAuthenticated
      case 6: self = .serviceRejected
      case 7: self = .serviceUnavailable
      case 99: self = .internalError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .default: return 0
      case .success: return 1
      case .invalidVersion: return 2
      case .invalidService: return 3
      case .invalidPayload: return 4
      case .notAuthenticated: return 5
      case .serviceRejected: return 6
      case .serviceUnavailable: return 7
      case .internalError: return 99
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension RpcMessage.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [RpcMessage.Result] = [
    .default,
    .success,
    .invalidVersion,
    .invalidService,
    .invalidPayload,
    .notAuthenticated,
    .serviceRejected,
    .serviceUnavailable,
    .internalError,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RpcMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RpcMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "result"),
    3: .same(proto: "version"),
    4: .same(proto: "service"),
    5: .standard(proto: "source_id"),
    6: .standard(proto: "context_id"),
    7: .standard(proto: "payload_data"),
    8: .standard(proto: "payload_class"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.result)
      case 3: try decoder.decodeSingularStringField(value: &self.version)
      case 4: try decoder.decodeSingularStringField(value: &self.service)
      case 5: try decoder.decodeSingularInt64Field(value: &self.sourceID)
      case 6: try decoder.decodeSingularInt64Field(value: &self.contextID)
      case 7: try decoder.decodeSingularBytesField(value: &self.payloadData)
      case 8: try decoder.decodeSingularStringField(value: &self.payloadClass)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.result != .default {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 2)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 3)
    }
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 4)
    }
    if self.sourceID != 0 {
      try visitor.visitSingularInt64Field(value: self.sourceID, fieldNumber: 5)
    }
    if self.contextID != 0 {
      try visitor.visitSingularInt64Field(value: self.contextID, fieldNumber: 6)
    }
    if !self.payloadData.isEmpty {
      try visitor.visitSingularBytesField(value: self.payloadData, fieldNumber: 7)
    }
    if !self.payloadClass.isEmpty {
      try visitor.visitSingularStringField(value: self.payloadClass, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RpcMessage, rhs: RpcMessage) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.result != rhs.result {return false}
    if lhs.version != rhs.version {return false}
    if lhs.service != rhs.service {return false}
    if lhs.sourceID != rhs.sourceID {return false}
    if lhs.contextID != rhs.contextID {return false}
    if lhs.payloadData != rhs.payloadData {return false}
    if lhs.payloadClass != rhs.payloadClass {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RpcMessage.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "INVALID_VERSION"),
    3: .same(proto: "INVALID_SERVICE"),
    4: .same(proto: "INVALID_PAYLOAD"),
    5: .same(proto: "NOT_AUTHENTICATED"),
    6: .same(proto: "SERVICE_REJECTED"),
    7: .same(proto: "SERVICE_UNAVAILABLE"),
    99: .same(proto: "INTERNAL_ERROR"),
  ]
}
